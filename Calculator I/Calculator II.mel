global proc float Calculate(float $numbers[], string $operation)
{
	float $functionAnswer = 0;
	string $input;
	
	if($operation == "addition")
	{
		$input = floatArrayToString($numbers, " + ");
		$functionAnswer = Add($numbers);
	}
	
	else if ($operation == "subtraction")
	{
		$input = floatArrayToString($numbers, " - ");
		$functionAnswer = Subtract($numbers);
	}
	
   else if ($operation == "multiplication")
	{
		$input = floatArrayToString($numbers, " * ");
		$functionAnswer = Multiply($numbers);
	}
	
	else if ($operation == "division")
	{
		$input = floatArrayToString($numbers, " / ");
		$functionAnswer = Divide($numbers);
	}
	
	else if ($operation == "power" || $operation == "Power")
	{
		$input = floatArrayToString($numbers, " to the power of ");
		$functionAnswer = Power($numbers);
	}
	
	else if ($operation == "mean" || $operation == "Mean")
	{
		$input = "The mean of " + floatArrayToString($numbers, ",");
		$functionAnswer = Mean($numbers);
	}
	
	else if ($operation == "median" || $operation == "Median")
	{
		$input = "The median of " + floatArrayToString($numbers, ",");
		$functionAnswer = Median($numbers);
	}
	
	else if ($operation == "mode" || $operation == "Mode")
	{
		$input = "The mean of " + floatArrayToString($numbers, ",");
		$functionAnswer = Mode($numbers);
	}
	
	else print ("Invalid Operation \n");
	
	print ($input + " = ");
	print ($functionAnswer + "\n");
	
	return $functionAnswer;
	
}

//Addition
proc float Add(float $numbers[])
{
    float $sum = 0;
    
    for ($i=0; $i<size($numbers); $i++)
    {
        $sum += $numbers[$i];
    }
    
    return $sum;
}

//Subtraction
proc float Subtract(float $numbers[])
{
    float $difference = 500;
    
    for ($i=0; $i<size($numbers); $i++)
    {
          $difference -= $numbers[$i];          
    }
    
    return $difference;
}

//Multiplication
proc float Multiply(float $numbers[])
{
    float $multiplied = 1;
    
    for ($i=0; $i<size($numbers); $i++)
    {
         $multiplied *= $numbers[$i];           
    }
    
    return $multiplied;
}

//Division
proc float Divide(float $numbers[])
{
    float $division = 5000;
    
    for ($i=0; $i<size($numbers); $i++)
    {
         $division /= $numbers[$i];           
    }
    
    return $division;
}

//To the Power
proc float Power(float $numbers[])
{
    float $exponent = 1;
    float $base = $numbers[0];
    float $startNumber = $numbers[0];
    float $nextNumber = $numbers[1];
    
    for ($i=0; $i<$nextNumber - 1; $i++)
    {
         $base = $base * $startNumber;           
    }
    
    return $base;
}

//Mean/Average
proc float Mean(float $numbers[])
{
        float $mean = 0;
        
        for ($i=0; $i<size($numbers); $i++)
        {
             $mean += $numbers[$i];        
        }
        
        $mean = $mean / `size($numbers)`; //take the sum of the numbers and divide by the size of numbers array
        
        return $mean;
}

//Median
proc float Median(float $numbers[])
{    
    float $medianNum;
    int $middleNum = size($numbers)/2;
    
    for ($i=0; $i<size($numbers); $i++)
    {        
        if (size($numbers)%2 == 0)
        {
            $medianNum = ($numbers[$middleNum - 1] + $numbers[$middleNum]) / 2;
        }
        
        else
        {
            $medianNum = $numbers[$middleNum];
        }         
           
    }
    
    return $medianNum;
    //return $numbers[2]/1.3;
}

//Mode
proc float Mode(float $numbers[])
{
    float $values[];
    float $frequency[];
    
    for ($i=0; $i<size($numbers); $i++)
    {
        if (!floatArrayContains($numbers[$i], $values))
        {
            $values[size($values)] = $numbers[$i];
            $frequency[size($values)] = 1;
        }
        else
        {
            // values == [3,5,2,87,4,56]
            // freq   == [1,3,2, 1,1, 1]
            int $index;
            $index = floatArrayFind($numbers[$i], 0, $values); //find index number in the values array to increment its frequency
            $frequency[$index] = $frequency[$index] + 1; //add 1 to the frequency of number in value array
        }
    }
    
    int $maxIndex;
    $maxIndex = 0;
    
    for ($i=1; $i<size($frequency); $i++) // Loop through frequency[] to find largest value
    {
        if($frequency[$i]>$frequency[$maxIndex])
        {
            $maxIndex = $i;     // Get the index of the said value
        }
    }

    return $values[$maxIndex];         // Get associated value from $values[] Return as the mode
}

Calculate({2,3,4,5,5,5,17,56,87}, "subtraction");